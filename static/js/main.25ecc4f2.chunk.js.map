{"version":3,"sources":["components/Favorite.tsx","pages/Home.tsx","pages/Team.tsx","pages/Player.tsx","components/MergeSort.tsx","components/leagueTable/ALeagueTable.tsx","components/leagueTable/AmericanFootballTable.tsx","components/leagueTable/AustralianFootballTable.tsx","components/leagueTable/BaseballTable.tsx","components/leagueTable/BasketballTable.tsx","components/leagueTable/CricketTable.tsx","components/leagueTable/CyclingTable.tsx","components/leagueTable/DartsTable.tsx","components/leagueTable/EsportTable.tsx","components/leagueTable/FieldHockeyTable.tsx","components/leagueTable/FightingTable.tsx","components/leagueTable/GolfTable.tsx","components/leagueTable/HandballTable.tsx","components/leagueTable/IceHockeyTable.tsx","components/leagueTable/MotorsportTable.tsx","components/leagueTable/NetballTable.tsx","components/leagueTable/RugbyTable.tsx","components/leagueTable/SnookerTable.tsx","components/leagueTable/SoccerTable.tsx","components/leagueTable/VolleyballTable.tsx","components/Events.tsx","components/leagueTable/LeagueTable.tsx","components/leagueTable/GenerateTable.tsx","pages/League.tsx","components/Search.tsx","pages/Teams.tsx","components/LeaguesList.tsx","pages/Leagues.tsx","components/Footer.tsx","components/Nav.tsx","components/Header.tsx","components/Wrapper.tsx","pages/Error404.tsx","components/Season.tsx","components/Event.tsx","routes/Routes.tsx","App.js","reportWebVitals.js","index.js"],"names":["Favorite","list","name","url","Object","keys","length","className","entries","map","key","value","to","id","src","badge","alt","Home","favorite","teams","JSON","parse","localStorage","getItem","leagues","Team","props","useState","json","setJson","useParams","useEffect","fetch","then","response","data","catch","error","console","onClick","toSave","localStorageArray","strTeamBadge","strAlternate","strTeam","setItem","stringify","strTeamBanner","style","maxWidth","strCountry","intFormedYear","strStadium","intStadiumCapacity","href","strWebsite","strTwitter","strInstagram","strFacebook","strYoutube","strLeague","strLeague2","strLeague3","strLeague4","strLeague5","strDescriptionEN","strStadiumLocation","strStadiumDescription","strStadiumThumb","Player","Merge","array","comparer","dividerPosition","Math","floor","arrayA","arrayB","startA","lengthA","startB","lengthB","newArray","push","Sort","slice","ALeagueTable","columnName","bodyContent","this","GenerateTableHead","GenerateTableBody","keysList","content","elem","i","cols","y","idTeam","title","Comparer","A","B","intRank","parseInt","AmericanFootballTable","DeleteDuplicat","intPoints","strDescription","AustralianFootballTable","BaseballTable","BasketballTable","CricketTable","CyclingTable","DartsTable","EsportTable","FieldHockeyTable","FightingTable","GolfTable","HandballTable","IceHockeyTable","intPlayed","intWin","intLoss","intDraw","intGoalsFor","intGoalsAgainst","intGoalDifference","MotorsportTable","NetballTable","RugbyTable","SnookerTable","SoccerTable","VolleyballTable","Events","events","err","strHomeTeam","idEvent","intHomeScore","intAwayScore","strAwayTeam","dateEvent","objectNoDuplicate","filter","teamName","LeagueTable","state","setState","objLeague","sport","GenerateTable","seasonJSON","setSeasonJSON","leagueId","season","log","table","idLeague","ExternalLink","rel","target","children","League","leagueLookupJSON","setLeagueLookupJSON","fanArts","strBadge","strLeagueAlternate","strBanner","strSport","strCurrentSeason","Search","resolve","Teams","LeaguesList","leaguesList","league","filteredList","toUpperCase","includes","leagueElements","element","ToJSX","GenerateLeagueList","leagueName","e","Leagues","sportInput","useRef","leagueInput","jsonData","setJsonData","sportSelected","setSportSelected","leagueSelected","setLeagueSelected","groupingList","forEach","Add","action","htmlFor","ref","onChange","current","type","Footer","Date","getFullYear","linkList","path","Nav","data-toggle","data-target","aria-controls","aria-expanded","aria-label","obj","index","Header","searchInput","history","useHistory","onSubmit","event","preventDefault","Wrapper","Error404","Season","Event","strEvent","strTime","strSeason","intRound","strHomeFormation","strHomeLineupForward","strHomeLineupMidField","strHomeLineupDefense","strHomeLineupGoalkeeper","strAwayFormation","strAwayLineupForward","strAwayLineupMidField","strAwayLineupDefense","strAwayLineupGoalkeeper","strHomeGoalDetails","strAwayGoalDetails","intHomeShots","intAwayShots","strGomeYellowCards","StrAwayYellowCards","strHomeRedCards","strAwayRedCards","Routes","routes","component","route","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25ecc4f2.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\r\n\r\ntype FavoriteElemType = {\r\n  id: string\r\n  badge: string\r\n  name: string\r\n}\r\n\r\nfunction Favorite({\r\n  list,\r\n  name,\r\n}: {\r\n  list: { [key: string]: FavoriteElemType } | string\r\n  name: string\r\n}) {\r\n  const url = name === 'teams' ? 'team/' : 'league/'\r\n  if (Object.keys(list).length === 0)\r\n    return (\r\n      <div className=\"\">\r\n        <p>Favorite {name}</p>\r\n        <p>You don't have favorite {name}</p>\r\n      </div>\r\n    )\r\n  return (\r\n    <div className=\"col\">\r\n      <p className=\"display-4 text-uppercase font-weight-bold\">\r\n        Favorite {name}\r\n      </p>\r\n      <div className=\"d-flex \">\r\n        {Object.entries(list).map(\r\n          ([key, value]: [string, FavoriteElemType]) => {\r\n            return (\r\n              <Link\r\n                key={key}\r\n                to={url + value.id}\r\n                className=\"d-flex flex-wrap align-items-center\"\r\n              >\r\n                <img src={value.badge} alt={value.name} />\r\n                <span className=\"\">{value.name}</span>\r\n              </Link>\r\n            )\r\n          }\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport type { FavoriteElemType }\r\nexport default Favorite\r\n","import Favorite, { FavoriteElemType } from '../components/Favorite'\r\nimport './home.scss'\r\ntype favoriteTypes = {\r\n  teams: { [key: string]: FavoriteElemType } | string\r\n  leagues: { [key: string]: FavoriteElemType } | string\r\n}\r\n\r\nfunction Home() {\r\n  const favorite: favoriteTypes = {\r\n    teams: JSON.parse(localStorage.getItem('favoriteTeams') || '{}'),\r\n    leagues: JSON.parse(localStorage.getItem('favoriteLeagues') || '{}'),\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row favorite-container\">\r\n        {Object.entries(favorite).map(([key, value]) => (\r\n          <Favorite key={key} list={value} name={key} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { FunctionComponent, useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { FavoriteElemType } from '../components/Favorite'\r\n\r\ntype TeamProps = {}\r\n\r\ntype jsonType = {\r\n  idTeam: string\r\n  idSoccerXML: string\r\n  idAPIfootball: string\r\n  intLoved: string\r\n  strTeam: string\r\n  strTeamShort: string\r\n  strAlternate: string\r\n  intFormedYear: string\r\n  strSport: string\r\n  strLeague: string\r\n  idLeague: string\r\n  strLeague2: string\r\n  idLeague2: string\r\n  strLeague3: string\r\n  idLeague3: string\r\n  strLeague4: string\r\n  idLeague4: string\r\n  strLeague5: string\r\n  idLeague5: string\r\n  strLeague6: string\r\n  idLeague6: string\r\n  strLeague7: string\r\n  idLeague7: string\r\n  strDivision: string\r\n  strManager: string\r\n  strStadium: string\r\n  strKeywords: string\r\n  strRSS: string\r\n  strStadiumThumb: string\r\n  strStadiumDescription: string\r\n  strStadiumLocation: string\r\n  intStadiumCapacity: string\r\n  strWebsite: string\r\n  strFacebook: string\r\n  strTwitter: string\r\n  strInstagram: string\r\n  strDescriptionEN: string\r\n  strGender: string\r\n  strCountry: string\r\n  strTeamBadge: string\r\n  strTeamJersey: string\r\n  strTeamLogo: string\r\n  strTeamFanart1: string\r\n  strTeamFanart2: string\r\n  strTeamFanart3: string\r\n  strTeamFanart4: string\r\n  strTeamBanner: string\r\n  strYoutube: string\r\n  strLocked: string\r\n} | null\r\n\r\nconst Team: FunctionComponent<TeamProps> = (props) => {\r\n  const [json, setJson] = useState<jsonType>(null)\r\n  let { id } = useParams()\r\n  useEffect(() => {\r\n    if (id) {\r\n      let url = `https://www.thesportsdb.com/api/v1/json/1/lookupteam.php?id=${id}`\r\n      fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setJson({ ...data.teams[0] })\r\n        })\r\n        .catch((error) => {\r\n          console.error(error)\r\n        })\r\n    }\r\n  }, [id])\r\n\r\n  const addFavoriteTeam = () => {\r\n    let toSave: FavoriteElemType\r\n    let localStorageArray: { [key: string]: FavoriteElemType } | null\r\n    localStorageArray = JSON.parse(\r\n      localStorage.getItem('favoriteTeams') || '{}'\r\n    )\r\n    if (localStorageArray === null) localStorageArray = {}\r\n\r\n    if (json !== null) {\r\n      toSave = {\r\n        badge: json.strTeamBadge,\r\n        name: json.strAlternate,\r\n        id: id,\r\n      }\r\n      if (!localStorageArray[json.strTeam]) {\r\n        localStorageArray[json.strTeam] = toSave\r\n        localStorage.setItem('favoriteTeams', JSON.stringify(localStorageArray))\r\n      }\r\n    }\r\n  }\r\n\r\n  return json != null ? (\r\n    <div>\r\n      <button onClick={addFavoriteTeam} className=\"btn btn-primary text-light\">\r\n        Favorite\r\n      </button>\r\n      <img src={json.strTeamBanner} alt={json.strTeam} className=\"img-fluid\" />\r\n      <img\r\n        src={json.strTeamBadge}\r\n        alt={json.strTeam}\r\n        style={{ maxWidth: '100px' }}\r\n      />\r\n      <h1>{json.strTeam}</h1>\r\n      <p>{json.strCountry}</p>\r\n      <p>{json.intFormedYear}</p>\r\n      <p>\r\n        {json.strStadium}: {json.intStadiumCapacity}\r\n      </p>\r\n      <a\r\n        href={'https' + json.strWebsite}\r\n        className=\"btn btn-primary text-light\"\r\n      >\r\n        Website\r\n      </a>\r\n      <a\r\n        href={'https' + json.strTwitter}\r\n        className=\"btn btn-primary text-light\"\r\n      >\r\n        twiiter\r\n      </a>\r\n      <a\r\n        href={'https' + json.strInstagram}\r\n        className=\"btn btn-primary text-light\"\r\n      >\r\n        Instagram\r\n      </a>\r\n      <a\r\n        href={'https' + json.strFacebook}\r\n        className=\"btn btn-primary text-light\"\r\n      >\r\n        facebook\r\n      </a>\r\n      <a\r\n        href={'https' + json.strYoutube}\r\n        className=\"btn btn-primary text-light\"\r\n      >\r\n        youtube\r\n      </a>\r\n      <p>{json.strLeague}</p>\r\n      <p>{json.strLeague2}</p>\r\n      <p>{json.strLeague3}</p>\r\n      <p>{json.strLeague4}</p>\r\n      <p>{json.strLeague5}</p>\r\n      <p>{json.strDescriptionEN}</p>\r\n      <p>Stadium</p>\r\n      <p>{json.strStadiumLocation}</p>\r\n      <p>{json.strStadiumDescription}</p>\r\n      <img\r\n        src={json.strStadiumThumb}\r\n        alt={json.strStadium}\r\n        className=\"img-fluid\"\r\n      />\r\n    </div>\r\n  ) : (\r\n    <p>NotFound</p>\r\n  )\r\n}\r\n\r\nexport default Team\r\n","import { FunctionComponent } from 'react'\r\n\r\ntype PlayerProps = {}\r\n\r\nconst Player: FunctionComponent<PlayerProps> = () => {\r\n  return <p>Player</p>\r\n}\r\n\r\nexport default Player\r\n","function Merge<T>(array: T[], comparer: (A: T, B: T) => boolean): T[] {\r\n  if (array.length <= 1) return array\r\n  let dividerPosition: number = Math.floor(array.length / 2)\r\n  let arrayA: T[], arrayB: T[]\r\n  arrayA = Merge(array.slice(dividerPosition), comparer)\r\n  arrayB = Merge(array.slice(0, dividerPosition), comparer)\r\n  return Sort<T>(arrayA, arrayB, comparer)\r\n}\r\n\r\nfunction Sort<T>(\r\n  arrayA: T[],\r\n  arrayB: T[],\r\n  comparer: (A: T, B: T) => boolean\r\n): T[] {\r\n  let compareStatus: Boolean\r\n  let startA = 0\r\n  let lengthA = arrayA.length\r\n  let startB = 0\r\n  let lengthB = arrayB.length\r\n  let newArray: T[] = []\r\n  while (startA < lengthA || startB < lengthB) {\r\n    compareStatus = comparer(arrayA[startA], arrayB[startB])\r\n    if (compareStatus) {\r\n      newArray.push(arrayA[startA])\r\n      startA++\r\n    } else {\r\n      newArray.push(arrayB[startB])\r\n      startB++\r\n    }\r\n  }\r\n  return newArray\r\n}\r\n\r\nexport { Merge, Sort }\r\n","import { ReactElement } from 'react'\r\nimport { Link } from 'react-router-dom'\r\ninterface ILeagueTable {\r\n  GenerateTable(): ReactElement\r\n  GenerateTableHead(): ReactElement\r\n  GenerateTableBody(): ReactElement\r\n}\r\n\r\nabstract class ALeagueTable<T> implements ILeagueTable {\r\n  abstract columnName: { [key: string]: string }\r\n  bodyContent: T[] = []\r\n  constructor(json: T[]) {\r\n    this.bodyContent = json\r\n  }\r\n\r\n  GenerateTable() {\r\n    return (\r\n      <table className=\"table-dark\">\r\n        {this.GenerateTableHead()}\r\n        {this.GenerateTableBody()}\r\n      </table>\r\n    )\r\n  }\r\n\r\n  GenerateTableHead() {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          {Object.entries(this.columnName).map(([key, value]) => (\r\n            <th key={key}>{value}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n    )\r\n  }\r\n\r\n  GenerateTableBody() {\r\n    const keysList: string[] = Object.keys(this.columnName)\r\n    let content = this.bodyContent.map((elem: any, i: number) => {\r\n      let cols = keysList.map((key, y) => {\r\n        if (key === 'strTeam')\r\n          return (\r\n            <td key={`${i}-${key}${y}`}>\r\n              <Link\r\n                to={'/team/' + elem.idTeam}\r\n                className=\"text-primary font-uppercase\"\r\n              >\r\n                <img src={elem.strTeamBadge} title={elem.strTeam} alt=\"\" />\r\n                {elem.strTeam}\r\n              </Link>\r\n            </td>\r\n          )\r\n\r\n        return <td key={`${i}-${key}${y}`}>{elem[key]}</td>\r\n      })\r\n      return <tr key={i}>{cols}</tr>\r\n    })\r\n    return <tbody>{content}</tbody>\r\n  }\r\n}\r\n\r\nexport type { ILeagueTable }\r\nexport { ALeagueTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype AmericanFootballType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: AmericanFootballType = {}, B: AmericanFootballType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass AmericanFootballTable extends ALeagueTable<AmericanFootballType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: AmericanFootballType[]) {\r\n    super(Merge<AmericanFootballType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { AmericanFootballType }\r\nexport { AmericanFootballTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype AustralianFootballType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: AustralianFootballType = {}, B: AustralianFootballType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass AustralianFootballTable extends ALeagueTable<AustralianFootballType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: AustralianFootballType[]) {\r\n    super(Merge<AustralianFootballType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { AustralianFootballType }\r\nexport { AustralianFootballTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype BaseballType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: BaseballType = {}, B: BaseballType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass BaseballTable extends ALeagueTable<BaseballType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: BaseballType[]) {\r\n    super(Merge<BaseballType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { BaseballType }\r\nexport { BaseballTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype BasketballType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: BasketballType = {}, B: BasketballType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass BasketballTable extends ALeagueTable<BasketballType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: BasketballType[]) {\r\n    super(Merge<BasketballType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { BasketballType }\r\nexport { BasketballTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype CricketType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: CricketType = {}, B: CricketType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass CricketTable extends ALeagueTable<CricketType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: CricketType[]) {\r\n    super(Merge<CricketType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { CricketType }\r\nexport { CricketTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype CyclingType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: CyclingType = {}, B: CyclingType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass CyclingTable extends ALeagueTable<CyclingType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: CyclingType[]) {\r\n    super(Merge<CyclingType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { CyclingType }\r\nexport { CyclingTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype DartsType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: DartsType = {}, B: DartsType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass DartsTable extends ALeagueTable<DartsType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: DartsType[]) {\r\n    super(Merge<DartsType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { DartsType }\r\nexport { DartsTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype EsportType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: EsportType = {}, B: EsportType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass EsportTable extends ALeagueTable<EsportType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: EsportType[]) {\r\n    super(Merge<EsportType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { EsportType }\r\nexport { EsportTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype FieldHockeyType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: FieldHockeyType = {}, B: FieldHockeyType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass FieldHockeyTable extends ALeagueTable<FieldHockeyType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: FieldHockeyType[]) {\r\n    super(Merge<FieldHockeyType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { FieldHockeyType }\r\nexport { FieldHockeyTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype FightingType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: FightingType = {}, B: FightingType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass FightingTable extends ALeagueTable<FightingType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: FightingType[]) {\r\n    super(Merge<FightingType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { FightingType }\r\nexport { FightingTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype GolfType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: GolfType = {}, B: GolfType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass GolfTable extends ALeagueTable<GolfType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: GolfType[]) {\r\n    super(Merge<GolfType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { GolfType }\r\nexport { GolfTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype HandballType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: HandballType = {}, B: HandballType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass HandballTable extends ALeagueTable<HandballType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: HandballType[]) {\r\n    super(Merge<HandballType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { HandballType }\r\nexport { HandballTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype IceHockeyType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strForm?: string\r\n  strDescription?: string\r\n  intPlayed?: string\r\n  intWin?: string\r\n  intLoss?: string\r\n  intDraw?: string\r\n  intGoalsFor?: string\r\n  intGoalsAgainst?: string\r\n  intGoalDifference?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: IceHockeyType = {}, B: IceHockeyType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass IceHockeyTable extends ALeagueTable<IceHockeyType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    intPlayed: 'Matches',\r\n    intWin: 'Wins',\r\n    intLoss: 'Losers',\r\n    intDraw: 'Draw',\r\n    intGoalsFor: 'Goal for',\r\n    intGoalsAgainst: 'Goal against',\r\n    intGoalDifference: 'Diffrence goal',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: IceHockeyType[]) {\r\n    super(Merge<IceHockeyType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { IceHockeyType }\r\nexport { IceHockeyTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype MotorsportType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: MotorsportType = {}, B: MotorsportType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass MotorsportTable extends ALeagueTable<MotorsportType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: MotorsportType[]) {\r\n    super(Merge<MotorsportType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { MotorsportType }\r\nexport { MotorsportTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype NetballType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: NetballType = {}, B: NetballType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass NetballTable extends ALeagueTable<NetballType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: NetballType[]) {\r\n    super(Merge<NetballType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { NetballType }\r\nexport { NetballTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype RugbyType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: RugbyType = {}, B: RugbyType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass RugbyTable extends ALeagueTable<RugbyType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: RugbyType[]) {\r\n    super(Merge<RugbyType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { RugbyType }\r\nexport { RugbyTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype SnookerType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: SnookerType = {}, B: SnookerType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass SnookerTable extends ALeagueTable<SnookerType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: SnookerType[]) {\r\n    super(Merge<SnookerType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { SnookerType }\r\nexport { SnookerTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype SoccerType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strForm?: string\r\n  strDescription?: string\r\n  intPlayed?: string\r\n  intWin?: string\r\n  intLoss?: string\r\n  intDraw?: string\r\n  intGoalsFor?: string\r\n  intGoalsAgainst?: string\r\n  intGoalDifference?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: SoccerType = {}, B: SoccerType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass SoccerTable extends ALeagueTable<SoccerType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    intPlayed: 'Matches',\r\n    intWin: 'Wins',\r\n    intLoss: 'Losers',\r\n    intDraw: 'Draw',\r\n    intGoalsFor: 'Goal for',\r\n    intGoalsAgainst: 'Goal against',\r\n    intGoalDifference: 'Diffrence goal',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: SoccerType[]) {\r\n    super(Merge<SoccerType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { SoccerType }\r\nexport { SoccerTable }\r\n","import { Merge } from '../MergeSort'\r\nimport { ALeagueTable } from './ALeagueTable'\r\nimport { DeleteDuplicat } from './LeagueTable'\r\n\r\ntype VolleyballType = {\r\n  idStanding?: string\r\n  intRank?: string\r\n  idTeam?: string\r\n  strTeam?: string\r\n  strTeamBadge?: string\r\n  idLeague?: string\r\n  strLeague?: string\r\n  strSeason?: string\r\n  strDescription?: string\r\n  intPoints?: string\r\n  dateUpdated?: string\r\n}\r\n\r\nfunction Comparer(A: VolleyballType = {}, B: VolleyballType = {}): boolean {\r\n  if (!A.intRank) return false\r\n  if (!B.intRank) return true\r\n  let rankA: number, rankB: number\r\n  rankA = parseInt(A['intRank'] || '0')\r\n  rankB = parseInt(B['intRank'] || '0')\r\n  return rankA <= rankB\r\n}\r\nclass VolleyballTable extends ALeagueTable<VolleyballType> {\r\n  columnName: { [key: string]: string } = {\r\n    intRank: 'Position',\r\n    strTeam: 'Team',\r\n    intPoints: 'Points',\r\n    strDescription: 'additional',\r\n  }\r\n\r\n  constructor(json: VolleyballType[]) {\r\n    super(Merge<VolleyballType>(DeleteDuplicat(json), Comparer))\r\n  }\r\n}\r\n\r\nexport type { VolleyballType }\r\nexport { VolleyballTable }\r\n","import { useEffect, useState } from 'react'\r\nimport { Link, useParams } from 'react-router-dom'\r\n\r\nexport default function Events() {\r\n  const [json, setJson] = useState<{ [key: string]: string }[] | null>(null)\r\n  const { id } = useParams()\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://www.thesportsdb.com/api/v1/json/1/eventspastleague.php?id=${id}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setJson(data.events)\r\n      })\r\n      .catch((err) => {\r\n        console.error(err)\r\n      })\r\n  }, [])\r\n  if (json === null) return <p>No data</p>\r\n  return (\r\n    <div>\r\n      {json[0].strLeague}\r\n      <table className=\"table\">\r\n        <tbody>\r\n          {json.map((elem) => (\r\n            <tr key={elem.idEvent}>\r\n              <td>{elem.strHomeTeam}</td>\r\n              <td>\r\n                <Link\r\n                  to={`/event/${elem.idEvent}`}\r\n                  className=\"text-danger cursor-pointer\"\r\n                >\r\n                  {elem.intHomeScore}- {elem.intAwayScore}\r\n                </Link>\r\n              </td>\r\n              <td>{elem.strAwayTeam}</td>\r\n              <td>{elem.dateEvent}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { AmericanFootballTable } from './AmericanFootballTable'\r\nimport { AustralianFootballTable } from './AustralianFootballTable'\r\nimport { BaseballTable } from './BaseballTable'\r\nimport { BasketballTable } from './BasketballTable'\r\nimport { CricketTable } from './CricketTable'\r\nimport { CyclingTable } from './CyclingTable'\r\nimport { DartsTable } from './DartsTable'\r\nimport { EsportTable } from './EsportTable'\r\nimport { FieldHockeyTable } from './FieldHockeyTable'\r\nimport { FightingTable } from './FightingTable'\r\nimport { GolfTable } from './GolfTable'\r\nimport { HandballTable } from './HandballTable'\r\nimport { IceHockeyTable } from './IceHockeyTable'\r\nimport { MotorsportTable } from './MotorsportTable'\r\nimport { NetballTable } from './NetballTable'\r\nimport { RugbyTable } from './RugbyTable'\r\nimport { SnookerTable } from './SnookerTable'\r\nimport { SoccerTable } from './SoccerTable'\r\nimport { VolleyballTable } from './VolleyballTable'\r\nimport Events from '../Events'\r\ntype LeagueType = {\r\n  json: any\r\n  sport: string\r\n}\r\n\r\nfunction DeleteDuplicat(array: { [key: string]: string }[]) {\r\n  const objectNoDuplicate: { [key: string]: boolean } = {}\r\n\r\n  return array.filter((elem: { [key: string]: string }) => {\r\n    let teamName: string = elem.strTeam\r\n    if (objectNoDuplicate[teamName || '']) return false\r\n    else {\r\n      objectNoDuplicate[teamName || ''] = true\r\n      return true\r\n    }\r\n  })\r\n}\r\n\r\nfunction LeagueTable(props: LeagueType) {\r\n  const [state, setState] = useState<SoccerTable | null>(null)\r\n\r\n  useEffect(() => {\r\n    let objLeague = null\r\n    switch (props.sport) {\r\n      case 'Soccer':\r\n        objLeague = new SoccerTable(props.json)\r\n        break\r\n      case 'Ice Hockey':\r\n        objLeague = new IceHockeyTable(props.json)\r\n        break\r\n      case 'Motorsport':\r\n        objLeague = new MotorsportTable(props.json)\r\n        break\r\n      case 'Basketball':\r\n        objLeague = new BasketballTable(props.json)\r\n        break\r\n      case 'American Football':\r\n        objLeague = new AmericanFootballTable(props.json)\r\n        break\r\n      case 'Rugby':\r\n        objLeague = new RugbyTable(props.json)\r\n        break\r\n      case 'Baseball':\r\n        objLeague = new BaseballTable(props.json)\r\n        break\r\n      case 'Golf':\r\n        objLeague = new GolfTable(props.json)\r\n        break\r\n      case 'Fighting':\r\n        objLeague = new FightingTable(props.json)\r\n        break\r\n      case 'Australian Football':\r\n        objLeague = new AustralianFootballTable(props.json)\r\n        break\r\n      case 'Cricket':\r\n        objLeague = new CricketTable(props.json)\r\n        break\r\n      case 'Cycling':\r\n        objLeague = new CyclingTable(props.json)\r\n        break\r\n      case 'Esport':\r\n      case 'ESport':\r\n        objLeague = new EsportTable(props.json)\r\n        break\r\n      case 'Handball':\r\n        objLeague = new HandballTable(props.json)\r\n        break\r\n      case 'Netball':\r\n        objLeague = new NetballTable(props.json)\r\n        break\r\n      case 'Volleyball':\r\n        objLeague = new VolleyballTable(props.json)\r\n        break\r\n      case 'Darts':\r\n        objLeague = new DartsTable(props.json)\r\n        break\r\n      case 'Snooker':\r\n        objLeague = new SnookerTable(props.json)\r\n        break\r\n      case 'Field Hockey':\r\n        objLeague = new FieldHockeyTable(props.json)\r\n        break\r\n    }\r\n\r\n    setState(objLeague)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {state ? (\r\n        <>\r\n          {state.GenerateTable()}\r\n          <Events />\r\n        </>\r\n      ) : (\r\n        <p>problem</p>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport { DeleteDuplicat }\r\nexport default LeagueTable\r\n","import { useEffect, useState } from 'react'\r\nimport LeagueTable from './LeagueTable'\r\nimport { Link } from 'react-router-dom'\r\nconst GenerateTable = (props: {\r\n  season: string\r\n  leagueId: string\r\n  sport: string\r\n}) => {\r\n  const [seasonJSON, setSeasonJSON] = useState<\r\n    { [key: string]: string }[] | string\r\n  >([])\r\n\r\n  useEffect(() => {\r\n    let url = `https://www.thesportsdb.com/api/v1/json/1/lookuptable.php?l=${props.leagueId}&s=${props.season}`\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(url, data)\r\n        if (data) setSeasonJSON(data.table)\r\n      })\r\n      .catch((error) => {\r\n        setSeasonJSON('No data')\r\n      })\r\n  }, [])\r\n\r\n  return typeof seasonJSON !== 'string' ? (\r\n    <div>\r\n      {seasonJSON.length === 0 ? (\r\n        <p>fetchning...</p>\r\n      ) : (\r\n        <>\r\n          <p>\r\n            <Link\r\n              to={`/season/${seasonJSON[0].idLeague}/${props.season}`}\r\n              className=\"text-info\"\r\n            >\r\n              {props.season}\r\n            </Link>\r\n          </p>\r\n          <div>\r\n            <LeagueTable json={seasonJSON} sport={props.sport}></LeagueTable>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  )\r\n}\r\n\r\nexport default GenerateTable\r\n","import React, { FunctionComponent, useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { FavoriteElemType } from '../components/Favorite'\r\nimport GenerateTable from '../components/leagueTable/GenerateTable'\r\n\r\n// type LeagueDescribePropsType = {\r\n//  json:{\t[key:string]:string}\r\n// }\r\ntype LeagueDescribeType = {\r\n  [key: string]: string\r\n}\r\n\r\ntype LeagueProps = {}\r\n\r\nconst ExternalLink = (props: { url: string; children: React.ReactNode }) => {\r\n  return (\r\n    <a\r\n      className=\"btn btn-primary text-light\"\r\n      href={'https://' + props.url}\r\n      rel=\"noopener noreferrer\"\r\n      target=\"blank\"\r\n    >\r\n      {props.children}\r\n    </a>\r\n  )\r\n}\r\n\r\nconst League: FunctionComponent<LeagueProps> = () => {\r\n  const [leagueLookupJSON, setLeagueLookupJSON] = useState<LeagueDescribeType>(\r\n    {}\r\n  )\r\n  let { id } = useParams()\r\n  useEffect(() => {\r\n    if (id) {\r\n      let url = `https://www.thesportsdb.com/api/v1/json/1/lookupleague.php?id=${id}`\r\n      fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setLeagueLookupJSON({ ...data.leagues[0] })\r\n        })\r\n        .catch((error) => {\r\n          console.error(error)\r\n        })\r\n    }\r\n  }, [id])\r\n\r\n  const addFavoriteLeague = () => {\r\n    let toSave: FavoriteElemType\r\n    let localStorageArray: { [key: string]: FavoriteElemType } | null\r\n    localStorageArray = JSON.parse(\r\n      localStorage.getItem('favoriteLeagues') || '{}'\r\n    )\r\n    if (localStorageArray === null) localStorageArray = {}\r\n\r\n    if (leagueLookupJSON !== null) {\r\n      toSave = {\r\n        badge: leagueLookupJSON.strBadge,\r\n        name: leagueLookupJSON.strLeague,\r\n        id: id,\r\n      }\r\n      if (!localStorageArray[leagueLookupJSON.strLeagueAlternate]) {\r\n        localStorageArray[leagueLookupJSON.strLeagueAlternate] = toSave\r\n        localStorage.setItem(\r\n          'favoriteLeagues',\r\n          JSON.stringify(localStorageArray)\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  let fanArts: React.ReactNodeArray = []\r\n  for (let i = 1; ; i++) {\r\n    let key = 'strFanart' + i\r\n    if (!leagueLookupJSON[key]) break\r\n    fanArts.push(\r\n      <img\r\n        className=\"img-fluid \"\r\n        key={key}\r\n        src={leagueLookupJSON[key]}\r\n        title={leagueLookupJSON.strLeague}\r\n        alt={leagueLookupJSON.strLeague}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={addFavoriteLeague}>Favorite</button>\r\n      {Object.keys(leagueLookupJSON).length > 0 ? (\r\n        <>\r\n          <div>\r\n            <p>{leagueLookupJSON.strCountry}</p>\r\n            <h1>{leagueLookupJSON.strLeague}</h1>\r\n            <img\r\n              className=\"img-fluid\"\r\n              src={leagueLookupJSON.strBanner}\r\n              title={leagueLookupJSON.strLeagueAlternate}\r\n              alt={leagueLookupJSON.strLeagueAlternate}\r\n            />\r\n            <p>{leagueLookupJSON.strSport}</p>\r\n          </div>\r\n          <GenerateTable\r\n            season={leagueLookupJSON.strCurrentSeason}\r\n            leagueId={leagueLookupJSON.idLeague}\r\n            sport={leagueLookupJSON.strSport}\r\n          />\r\n          <div>\r\n            <p>{leagueLookupJSON.strDescriptionEN}</p>\r\n            <ExternalLink url={leagueLookupJSON.strYoutube}>\r\n              Youtube\r\n            </ExternalLink>\r\n            <ExternalLink url={leagueLookupJSON.strWebsite}>\r\n              Website\r\n            </ExternalLink>\r\n            <ExternalLink url={leagueLookupJSON.strTwitter}>\r\n              Twitter\r\n            </ExternalLink>\r\n            <ExternalLink url={leagueLookupJSON.strFacebook}>\r\n              Facebook\r\n            </ExternalLink>\r\n            {fanArts}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <p>fetching</p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default League\r\n","import { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\ntype propsType = {\r\n  name: string\r\n}\r\nconst Search = ({ name }: propsType) => {\r\n  const [json, setJson] = useState<Array<{ [key: string]: string }> | null>(\r\n    null\r\n  )\r\n  useEffect(() => {\r\n    fetch(`https://www.thesportsdb.com/api/v1/json/1/searchteams.php?t=${name}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setJson(data.teams)\r\n      })\r\n      .catch((resolve) => {\r\n        console.error(resolve)\r\n      })\r\n  }, [name])\r\n  return (\r\n    <>\r\n      {json !== null && json.length > 0 ? (\r\n        <div>\r\n          {json.map((elem: { [key: string]: string }) => {\r\n            return (\r\n              <>\r\n                <Link key={elem.idTeam} to={`/team/${elem.idTeam}`}>\r\n                  {elem.strTeam}\r\n                </Link>\r\n                <br />\r\n              </>\r\n            )\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <p>No data</p>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import { FunctionComponent } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport Search from '../components/Search'\r\ntype TeamsProps = {}\r\n\r\nconst Teams: FunctionComponent<TeamsProps> = (props) => {\r\n  const { name } = useParams()\r\n\r\n  return name ? <Search name={name} /> : <p>Teams</p>\r\n}\r\n\r\nexport default Teams\r\n","import { Link } from 'react-router-dom'\r\n\r\ntype LeagueType = {\r\n  idLeague: string\r\n  strLeague: string\r\n  strSport: string\r\n  strLeagueAlternate: string\r\n}\r\n\r\ninterface ILeague {\r\n  idLeague: string\r\n  strLeague: string\r\n  strLeagueAlternate: string\r\n  ToJSX: () => any\r\n}\r\n\r\nclass League implements ILeague {\r\n  idLeague: string\r\n  strLeague: string\r\n  strLeagueAlternate: string\r\n\r\n  constructor({ idLeague, strLeague, strLeagueAlternate }: LeagueType) {\r\n    this.idLeague = idLeague\r\n    this.strLeague = strLeague\r\n    this.strLeagueAlternate = strLeagueAlternate\r\n  }\r\n\r\n  public ToJSX() {\r\n    return (\r\n      <li key={this.idLeague} className=\"bg-dark list-group-item\">\r\n        <Link to={'/league/' + this.idLeague} className=\"text-light\">{this.strLeague}</Link>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\ntype LeagueListType = {\r\n  leaguesList: Array<ILeague>\r\n  sport: string\r\n}\r\n\r\ninterface ILeagueList {\r\n  leaguesList: Array<ILeague>\r\n  sport: string\r\n  Add: (league: LeagueType) => void\r\n  ToJSX: () => any\r\n}\r\n\r\nclass LeaguesList implements ILeagueList {\r\n  leaguesList: Array<ILeague>\r\n  sport: string\r\n  constructor(sport: string) {\r\n    this.sport = sport\r\n    this.leaguesList = []\r\n  }\r\n  public Add(league: LeagueType) {\r\n    this.leaguesList.push(new League(league))\r\n  }\r\n  public ToJSX(name: string = '') {\r\n    const filteredList =\r\n      name !== ''\r\n        ? this.leaguesList.filter((elem) =>\r\n            elem.strLeague.toUpperCase().includes(name.toUpperCase())\r\n          )\r\n        : this.leaguesList\r\n    let leagueElements = filteredList.map((element) => {\r\n      return element.ToJSX()\r\n    })\r\n\r\n    return (\r\n      <>\r\n        <p className=\"display-4\">{this.sport}</p>\r\n        <ul className=\"  list-group width-100 flex-row flex-wrap\">{leagueElements}</ul>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport { LeaguesList, League }\r\n\r\nexport type { ILeague, ILeagueList, LeagueListType, LeagueType }\r\n","import { FunctionComponent, useEffect, useRef, useState } from 'react'\r\nimport { LeaguesList, LeagueType } from '../components/LeaguesList'\r\n\r\ntype LeaguesProps = {}\r\n\r\ntype GenerateLeagueListType = {\r\n  data: { [key: string]: LeaguesList }\r\n  sport: string\r\n  leagueName: string\r\n}\r\n\r\nconst GenerateLeagueList = (props: GenerateLeagueListType) => {\r\n  try {\r\n    const leagueName: string = props.leagueName\r\n    const sport: string = props.sport\r\n\r\n    let leagues: { [key: string]: LeaguesList } | LeaguesList = {}\r\n    if (sport !== '') leagues[sport] = props.data[sport]\r\n    else leagues = props.data\r\n    return (\r\n      <div>\r\n        {Object.entries(leagues).map(([key, value]) => {\r\n          return <div key={key}>{value.ToJSX(leagueName)}</div>\r\n        })}\r\n      </div>\r\n    )\r\n  } catch (e) {\r\n    console.error(e)\r\n    return <p key={'pr'}>Problem</p>\r\n  }\r\n}\r\n\r\nconst Leagues: FunctionComponent<LeaguesProps> = () => {\r\n  const sportInput = useRef<HTMLSelectElement>(null)\r\n  const leagueInput = useRef<HTMLInputElement>(null)\r\n  const [jsonData, setJsonData] = useState({})\r\n  const [sportSelected, setSportSelected] = useState('')\r\n  const [leagueSelected, setLeagueSelected] = useState('')\r\n  useEffect(() => {\r\n    fetch('https://www.thesportsdb.com/api/v1/json/1/all_leagues.php')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        let groupingList: { [key: string]: LeaguesList } = {}\r\n        data.leagues.forEach((elem: LeagueType) => {\r\n          if (!groupingList[elem.strSport])\r\n            groupingList[elem.strSport] = new LeaguesList(elem.strSport)\r\n          groupingList[elem.strSport].Add(elem)\r\n        })\r\n        setJsonData(groupingList)\r\n      })\r\n      .catch((error) => {\r\n        console.error(error)\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h1>Leagues</h1>\r\n      <form action=\"#\">\r\n        <div className=\"input-group md-3\">\r\n          <label htmlFor=\"dyscypline\" className=\"input-group-text\">\r\n            Dyscypline\r\n          </label>\r\n          <select\r\n            className=\"custom-select\"\r\n            name=\"dyscypline\"\r\n            id=\"dyscypline\"\r\n            ref={sportInput}\r\n            onChange={() =>\r\n              setSportSelected(\r\n                null !== sportInput.current ? sportInput.current.value : ''\r\n              )\r\n            }\r\n          >\r\n            <option value=\"\">Select</option>\r\n            {Object.keys(jsonData).map((key) => (\r\n              <option key={key} value={key}>\r\n                {key}\r\n              </option>\r\n            ))}{' '}\r\n          </select>\r\n        </div>\r\n        <div className=\"input-group md-3\">\r\n          <label htmlFor=\"name\" className=\"input-group-text\">\r\n            League name\r\n          </label>\r\n          <input\r\n            className=\"custom-select\"\r\n            type=\"text\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            ref={leagueInput}\r\n            onChange={() =>\r\n              setLeagueSelected(\r\n                null !== leagueInput.current ? leagueInput.current.value : ''\r\n              )\r\n            }\r\n          />\r\n        </div>\r\n      </form>\r\n      {Object.keys(jsonData).length > 0 ? (\r\n        <GenerateLeagueList\r\n          data={jsonData}\r\n          sport={sportSelected}\r\n          leagueName={leagueSelected}\r\n        />\r\n      ) : (\r\n        <p>fetching...</p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Leagues\r\n","const Footer = () => {\r\n  return (\r\n    <>\r\n      <footer>&copy; {new Date().getFullYear()}</footer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import { Link } from 'react-router-dom'\r\nimport './nav.scss'\r\nconst linkList = [\r\n  { name: 'Home Page', path: '/' },\r\n  { name: 'Leagues', path: '/leagues' },\r\n]\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarSupportedContent\"\r\n        aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav\">\r\n          {linkList.map((obj, index) => (\r\n            <li key={index} className=\"nav-item\">\r\n              <Link to={obj.path} className=\"nav-link\">\r\n                {obj.name}\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useRef } from 'react'\r\nimport Nav from './Nav'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n  const searchInput = useRef<HTMLInputElement>(null)\r\n  const history = useHistory()\r\n  const onSubmit = (event: React.FormEvent) => {\r\n    event.preventDefault()\r\n    debugger\r\n    history.push('/teams/' + searchInput.current?.value || '')\r\n  }\r\n  return (\r\n    <header>\r\n      <Nav />\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"input-group mb-3\">\r\n          <label htmlFor=\"searchTeamInput\" className=\"input-group-text\">Search team:</label>\r\n          <input\r\n            type=\"text\"\r\n            ref={searchInput}\r\n            id=\"searchTeamInput\"\r\n            name=\"searchTeamInput\"\r\n            className=\"form-control\"\r\n          />\r\n          <button type=\"submit\" className=\"btn bg-white btn-outline-secondary\">\r\n            search\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { FunctionComponent } from 'react'\r\nimport Footer from './Footer'\r\nimport Header from './Header'\r\n\r\ntype WrapperProps = {}\r\n\r\nconst Wrapper: FunctionComponent<WrapperProps> = ({ children }) => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <main>{children}</main>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Wrapper\r\n","const Error404 = () => <h1>404 - not found</h1>\r\n\r\nexport default Error404\r\n","import { useEffect, useState } from 'react'\r\nimport { Link, useParams } from 'react-router-dom'\r\nexport default function Season() {\r\n  const [json, setJson] = useState<{ [key: string]: string }[] | null>(null)\r\n  const { id, season } = useParams()\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://www.thesportsdb.com/api/v1/json/1/eventsseason.php?id=${id}&s=${season}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setJson(data.events)\r\n      })\r\n      .catch((err) => {\r\n        console.error(err)\r\n      })\r\n  }, [])\r\n  if (json === null) return <p>No data</p>\r\n  return (\r\n    <div>\r\n      {json[0].strLeague}\r\n      <table className=\"table\">\r\n        <tbody>\r\n          {json.map((elem) => (\r\n            <tr key={elem.idEvent}>\r\n              <td>{elem.strHomeTeam}</td>\r\n              <td>\r\n                <Link to={`/event/${elem.idEvent}`}>\r\n                  {elem.intHomeScore} - {elem.intAwayScore}\r\n                </Link>\r\n              </td>\r\n              <td>{elem.strAwayTeam}</td>\r\n              <td>{elem.dateEvent}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nexport default function Event() {\r\n  const [json, setJson] = useState<{ [key: string]: string } | null>(null)\r\n  const { id } = useParams()\r\n  useEffect(() => {\r\n    fetch(`https://www.thesportsdb.com/api/v1/json/1/lookupevent.php?id=${id}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setJson(data.events[0])\r\n      })\r\n      .catch((err) => {\r\n        console.error(err)\r\n      })\r\n  }, [])\r\n  if (json === null) return <p>No data</p>\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>{json.strEvent}</h1>\r\n        <p>\r\n          {json.dateEvent}: {json.strTime}\r\n        </p>\r\n        <p>\r\n          {' '}\r\n          {json.intHomeScore}-{json.intAwayScore}\r\n        </p>\r\n        <p className=\"text-primary\">\r\n          {json.strLeague} {json.strSeason} Round: {json.intRound}\r\n        </p>\r\n        <div>\r\n          <div>\r\n            <p>{json.strHomeTeam}</p>\r\n            <p>{json.strHomeFormation}</p>\r\n            <div>\r\n              <div>{json.strHomeLineupForward}</div>\r\n              <div>{json.strHomeLineupMidField}</div>\r\n              <div>{json.strHomeLineupDefense}</div>\r\n              <div>{json.strHomeLineupGoalkeeper}</div>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <p>{json.strAwayTeam}</p>\r\n            <p>{json.strAwayFormation}</p>\r\n            <div>\r\n              <div>{json.strAwayLineupForward}</div>\r\n              <div>{json.strAwayLineupMidField}</div>\r\n              <div>{json.strAwayLineupDefense}</div>\r\n              <div>{json.strAwayLineupGoalkeeper}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>{json.strHomeTeam}</th>\r\n                <th></th>\r\n                <th>{json.strAwayTeam}</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>{json.intHomeScore}</td>\r\n                <td>-</td>\r\n                <td>{json.intAwayScore}</td>\r\n              </tr>\r\n              <tr>\r\n                <td>{json.strHomeGoalDetails}</td>\r\n                <td>-</td>\r\n                <td>{json.strAwayGoalDetails}</td>\r\n              </tr>\r\n              <tr>\r\n                <td>{json.intHomeShots}</td>\r\n                <td>-</td>\r\n                <td>{json.intAwayShots}</td>\r\n              </tr>\r\n              <tr>\r\n                <td>{json.strGomeYellowCards}</td>\r\n                <td>-</td>\r\n                <td>{json.StrAwayYellowCards}</td>\r\n              </tr>\r\n              <tr>\r\n                <td>{json.strHomeRedCards}</td>\r\n                <td>-</td>\r\n                <td>{json.strAwayRedCards}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport Home from '../pages/Home'\r\nimport Team from '../pages/Team'\r\nimport Player from '../pages/Player'\r\nimport League from '../pages/League'\r\nimport Teams from '../pages/Teams'\r\nimport Leagues from '../pages/Leagues'\r\nimport Wrapper from '../components/Wrapper'\r\nimport Error404 from '../pages/Error404'\r\nimport Season from '../components/Season'\r\nimport Event from '../components/Event'\r\n\r\nconst Routes = () => {\r\n  const routes = [\r\n    {\r\n      path: '/season/:id/:season',\r\n      component: Season,\r\n    },\r\n    {\r\n      path: '/event/:id',\r\n      component: Event,\r\n    },\r\n    {\r\n      path: '/team/:id',\r\n      component: Team,\r\n    },\r\n    {\r\n      path: '/teams/:name',\r\n      component: Teams,\r\n    },\r\n    {\r\n      path: '/league/:id',\r\n      component: League,\r\n    },\r\n    {\r\n      path: '/leagues',\r\n      component: Leagues,\r\n    },\r\n    {\r\n      path: '/player/:id',\r\n      component: Player,\r\n    },\r\n    {\r\n      path: '/',\r\n      component: Home,\r\n    },\r\n  ]\r\n  return (\r\n    <Router>\r\n      <Wrapper>\r\n        <Switch>\r\n          {routes.map((route, index) => (\r\n            <Route {...route} key={index} />\r\n          ))}\r\n          <Route component={Error404} />\r\n        </Switch>\r\n      </Wrapper>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react'\r\nimport Routes from './routes/Routes'\r\nimport \"./app.scss\"\r\nfunction App() {\r\n\treturn <Routes />\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}